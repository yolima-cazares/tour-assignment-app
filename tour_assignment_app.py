{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "87d4bcd8-b6ab-4801-ac37-0cd5e01671b9",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'altair.vegalite.v4'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[4], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mpd\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mstreamlit\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mst\u001b[39;00m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mfolium\u001b[39;00m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mstreamlit_folium\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m st_folium\n",
      "File \u001b[0;32m/opt/conda/envs/anaconda-2024.02-py310/lib/python3.10/site-packages/streamlit/__init__.py:55\u001b[0m\n\u001b[1;32m     52\u001b[0m \u001b[38;5;66;03m# Give the package a version.\u001b[39;00m\n\u001b[1;32m     53\u001b[0m __version__ \u001b[38;5;241m=\u001b[39m _STREAMLIT_VERSION_STRING\n\u001b[0;32m---> 55\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mstreamlit\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mdelta_generator\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m DeltaGenerator \u001b[38;5;28;01mas\u001b[39;00m _DeltaGenerator\n\u001b[1;32m     56\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mstreamlit\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mproto\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mRootContainer_pb2\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m RootContainer \u001b[38;5;28;01mas\u001b[39;00m _RootContainer\n\u001b[1;32m     57\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mstreamlit\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mruntime\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mcaching\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m (\n\u001b[1;32m     58\u001b[0m     singleton \u001b[38;5;28;01mas\u001b[39;00m _singleton,\n\u001b[1;32m     59\u001b[0m     memo \u001b[38;5;28;01mas\u001b[39;00m _memo,\n\u001b[1;32m     60\u001b[0m )\n",
      "File \u001b[0;32m/opt/conda/envs/anaconda-2024.02-py310/lib/python3.10/site-packages/streamlit/delta_generator.py:45\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[38;5;66;03m# DataFrame elements come in two flavors: \"Legacy\" and \"Arrow\".\u001b[39;00m\n\u001b[1;32m     43\u001b[0m \u001b[38;5;66;03m# We select between them with the DataFrameElementSelectorMixin.\u001b[39;00m\n\u001b[1;32m     44\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mstreamlit\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01melements\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01marrow\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m ArrowMixin\n\u001b[0;32m---> 45\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mstreamlit\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01melements\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01marrow_altair\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m ArrowAltairMixin\n\u001b[1;32m     46\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mstreamlit\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01melements\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01marrow_vega_lite\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m ArrowVegaLiteMixin\n\u001b[1;32m     47\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mstreamlit\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01melements\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mballoons\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m BalloonsMixin\n",
      "File \u001b[0;32m/opt/conda/envs/anaconda-2024.02-py310/lib/python3.10/site-packages/streamlit/elements/arrow_altair.py:36\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01maltair\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01malt\u001b[39;00m\n\u001b[1;32m     35\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mpd\u001b[39;00m\n\u001b[0;32m---> 36\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01maltair\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mvegalite\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mv4\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mapi\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Chart\n\u001b[1;32m     37\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mapi\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mtypes\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m infer_dtype, is_integer_dtype\n\u001b[1;32m     38\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtyping_extensions\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Literal\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'altair.vegalite.v4'"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import streamlit as st\n",
    "import folium\n",
    "from streamlit_folium import st_folium\n",
    "import googlemaps\n",
    "import googlemaps.convert\n",
    "import itertools\n",
    "\n",
    "# Config\n",
    "API_KEY = \"AIzaSyAr85RLRpUlwAUWJnlqabn5JVv74WNyaqU\"\n",
    "gmaps = googlemaps.Client(key=API_KEY)\n",
    "\n",
    "# Cargar archivo\n",
    "@st.cache_data\n",
    "def load_data():\n",
    "    df = pd.read_csv(\"dispo.csv\", sep=';', encoding='utf-8-sig')\n",
    "    df.columns = df.columns.str.strip()\n",
    "    df['Pal'] = pd.to_numeric(df['Pal'], errors='coerce').fillna(0)\n",
    "    df['Zone'] = pd.to_numeric(df['Zone'], errors='coerce').fillna(0).astype(int)\n",
    "    df['Address'] = df['LA_ADRESSE'].astype(str).str.strip() + \\\n",
    "                    \", \" + df['LA_PLZ'].astype(str).str.strip() + \\\n",
    "                    \" \" + df['LA_ORT'].astype(str).str.strip()\n",
    "    df['Tour'] = \"\"\n",
    "    return df\n",
    "\n",
    "@st.cache_data\n",
    "def geocode_addresses(df):\n",
    "    coords = []\n",
    "    for addr in df['Address']:\n",
    "        result = gmaps.geocode(addr)\n",
    "        if result:\n",
    "            loc = result[0]['geometry']['location']\n",
    "            coords.append((loc['lat'], loc['lng']))\n",
    "        else:\n",
    "            coords.append((None, None))\n",
    "    df['Coordinates'] = coords\n",
    "    return df\n",
    "\n",
    "# Inicializar\n",
    "st.set_page_config(layout=\"wide\")\n",
    "st.title(\"AsignaciÃ³n interactiva de Tours\")\n",
    "\n",
    "# Cargar y geocodificar\n",
    "df = load_data()\n",
    "df = geocode_addresses(df)\n",
    "\n",
    "# Estado del tour seleccionado y asignaciones\n",
    "if 'tour_assignments' not in st.session_state:\n",
    "    st.session_state.tour_assignments = {}\n",
    "\n",
    "selected_tour = st.selectbox(\"Selecciona un Tour (1-15):\", [str(i) for i in range(1, 16)])\n",
    "if selected_tour not in st.session_state.tour_assignments:\n",
    "    st.session_state.tour_assignments[selected_tour] = set()\n",
    "\n",
    "# Calcular suma de pallets del tour seleccionado\n",
    "selected_pallets = 0\n",
    "for ls in st.session_state.tour_assignments[selected_tour]:\n",
    "    selected_pallets += df[df['LSNR'].astype(str) == ls]['Pal'].sum()\n",
    "\n",
    "st.markdown(f\"### ðŸ“¦ Tour {selected_tour} - {selected_pallets} Pallets asignados\")\n",
    "\n",
    "# Colores por tour\n",
    "tour_colors = itertools.cycle([\n",
    "    \"blue\", \"green\", \"red\", \"purple\", \"orange\", \"darkred\",\n",
    "    \"cadetblue\", \"darkgreen\", \"pink\", \"gray\", \"black\", \"beige\"\n",
    "])\n",
    "assigned_colors = {tour: color for tour, color in zip([str(i) for i in range(1, 16)], tour_colors)}\n",
    "\n",
    "# Crear mapa\n",
    "m = folium.Map(location=(df['Coordinates'].iloc[0]), zoom_start=8)\n",
    "\n",
    "for i, row in df.iterrows():\n",
    "    if row['Coordinates'][0] is None:\n",
    "        continue\n",
    "\n",
    "    ls_number = str(row['LSNR'])\n",
    "    tour_assigned = None\n",
    "    for tour_num, assigned_ids in st.session_state.tour_assignments.items():\n",
    "        if ls_number in assigned_ids:\n",
    "            tour_assigned = tour_num\n",
    "            break\n",
    "\n",
    "    df.at[i, 'Tour'] = tour_assigned if tour_assigned else \"\"\n",
    "    color = assigned_colors.get(df.at[i, 'Tour'], 'lightgray') if df.at[i, 'Tour'] else 'lightgray'\n",
    "\n",
    "    tooltip = f\"{row['LA_FIRMA']}, {row['Pal']} Pal\"\n",
    "    popup = f\"<b>{row['LA_FIRMA']}</b><br>Pallets: {row['Pal']}<br>Tour: {df.at[i, 'Tour'] or 'Ninguno'}<br><i>Haz clic para asignar/desasignar</i>\"\n",
    "\n",
    "    folium.Marker(\n",
    "        location=row['Coordinates'],\n",
    "        tooltip=tooltip,\n",
    "        popup=popup,\n",
    "        icon=folium.Icon(color=color)\n",
    "    ).add_to(m)\n",
    "\n",
    "# Mostrar mapa\n",
    "st_data = st_folium(m, width=1200, height=600)\n",
    "\n",
    "# Verificar clic en marcador (simulado desde mapa)\n",
    "if st_data and st_data.get(\"last_object_clicked_tooltip\"):\n",
    "    clicked_tooltip = st_data[\"last_object_clicked_tooltip\"]\n",
    "    firma = clicked_tooltip.split(\",\")[0].strip()\n",
    "    matched_row = df[df['LA_FIRMA'] == firma].iloc[0]\n",
    "    ls_number = str(matched_row['LSNR'])\n",
    "\n",
    "    if ls_number in st.session_state.tour_assignments[selected_tour]:\n",
    "        st.session_state.tour_assignments[selected_tour].remove(ls_number)\n",
    "        st.success(f\"Desasignado de Tour {selected_tour}: {firma}\")\n",
    "    else:\n",
    "        for tour_set in st.session_state.tour_assignments.values():\n",
    "            tour_set.discard(ls_number)\n",
    "        st.session_state.tour_assignments[selected_tour].add(ls_number)\n",
    "        st.success(f\"Asignado a Tour {selected_tour}: {firma}\")\n",
    "\n",
    "# Tabla para asignar tours\n",
    "st.subheader(\"Asignar tours desde la tabla\")\n",
    "clicked = st.data_editor(\n",
    "    df[['LSNR', 'LA_FIRMA', 'Pal', 'Zone', 'Tour']],\n",
    "    column_config={\"Tour\": st.column_config.SelectboxColumn(\"Tour\", options=[\"\"] + [str(i) for i in range(1, 16)])},\n",
    "    num_rows=\"dynamic\",\n",
    "    use_container_width=True,\n",
    "    key=\"editor\"\n",
    ")\n",
    "\n",
    "# Actualizar asignaciones\n",
    "for i, row in clicked.iterrows():\n",
    "    ls_number = str(row['LSNR'])\n",
    "    for tour in st.session_state.tour_assignments:\n",
    "        st.session_state.tour_assignments[tour].discard(ls_number)\n",
    "    if row['Tour']:\n",
    "        st.session_state.tour_assignments[row['Tour']].add(ls_number)\n",
    "\n",
    "# Mostrar resumen\n",
    "st.subheader(\"Resumen de Pallets por Tour\")\n",
    "tour_summary = df[df['Tour'] != \"\"].groupby('Tour')['Pal'].sum().reset_index()\n",
    "st.dataframe(tour_summary)\n",
    "\n",
    "# Guardar cambios\n",
    "if st.button(\"Guardar asignaciones en CSV\"):\n",
    "    df.to_csv(\"dispo_tours_asignados.csv\", sep=';', index=False)\n",
    "    st.success(\"CSV guardado como dispo_tours_asignados.csv\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-2024.02-py310",
   "language": "python",
   "name": "conda-env-anaconda-2024.02-py310-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
